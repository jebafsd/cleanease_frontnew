import {
  Input_default,
  NativeSelectInput_default,
  getNativeSelectUtilityClasses
} from "./chunk-F4WMRB2O.js";
import {
  ArrowDropDown_default
} from "./chunk-DS564QWK.js";
import {
  formControlState
} from "./chunk-PR6ZCO7G.js";
import {
  useFormControl
} from "./chunk-P5GPBA4E.js";
import {
  init_DefaultPropsProvider,
  useDefaultProps
} from "./chunk-MDTGKCUH.js";
import {
  composeClasses,
  init_composeClasses
} from "./chunk-YCITQ32A.js";
import {
  clsx_default,
  init_clsx
} from "./chunk-NRHMWJY5.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  init_extends,
  init_objectWithoutPropertiesLoose,
  require_prop_types
} from "./chunk-ZT4LHWX2.js";
import {
  require_jsx_runtime
} from "./chunk-NRBATONI.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@mui/material/NativeSelect/NativeSelect.js
init_extends();
init_objectWithoutPropertiesLoose();
var React = __toESM(require_react());
init_clsx();
var import_prop_types = __toESM(require_prop_types());
init_composeClasses();
init_DefaultPropsProvider();
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["className", "children", "classes", "IconComponent", "input", "inputProps", "variant"];
var _excluded2 = ["root"];
var useUtilityClasses = (ownerState) => {
  const {
    classes
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getNativeSelectUtilityClasses, classes);
};
var defaultInput = (0, import_jsx_runtime.jsx)(Input_default, {});
var NativeSelect = React.forwardRef(function NativeSelect2(inProps, ref) {
  const props = useDefaultProps({
    name: "MuiNativeSelect",
    props: inProps
  });
  const {
    className,
    children,
    classes: classesProp = {},
    IconComponent = ArrowDropDown_default,
    input = defaultInput,
    inputProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const muiFormControl = useFormControl();
  const fcs = formControlState({
    props,
    muiFormControl,
    states: ["variant"]
  });
  const ownerState = _extends({}, props, {
    classes: classesProp
  });
  const classes = useUtilityClasses(ownerState);
  const otherClasses = _objectWithoutPropertiesLoose(classesProp, _excluded2);
  return (0, import_jsx_runtime.jsx)(React.Fragment, {
    children: React.cloneElement(input, _extends({
      // Most of the logic is implemented in `NativeSelectInput`.
      // The `Select` component is a simple API wrapper to expose something better to play with.
      inputComponent: NativeSelectInput_default,
      inputProps: _extends({
        children,
        classes: otherClasses,
        IconComponent,
        variant: fcs.variant,
        type: void 0
      }, inputProps, input ? input.props.inputProps : {}),
      ref
    }, other, {
      className: clsx_default(classes.root, input.props.className, className)
    }))
  });
});
true ? NativeSelect.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The option elements to populate the select with.
   * Can be some `<option>` elements.
   */
  children: import_prop_types.default.node,
  /**
   * Override or extend the styles applied to the component.
   * @default {}
   */
  classes: import_prop_types.default.object,
  /**
   * @ignore
   */
  className: import_prop_types.default.string,
  /**
   * The icon that displays the arrow.
   * @default ArrowDropDownIcon
   */
  IconComponent: import_prop_types.default.elementType,
  /**
   * An `Input` element; does not have to be a material-ui specific `Input`.
   * @default <Input />
   */
  input: import_prop_types.default.element,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attributes) applied to the `select` element.
   */
  inputProps: import_prop_types.default.object,
  /**
   * Callback fired when a menu item is selected.
   *
   * @param {React.ChangeEvent<HTMLSelectElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: import_prop_types.default.func,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * The `input` value. The DOM API casts this to a string.
   */
  value: import_prop_types.default.any,
  /**
   * The variant to use.
   */
  variant: import_prop_types.default.oneOf(["filled", "outlined", "standard"])
} : void 0;
NativeSelect.muiName = "Select";
var NativeSelect_default = NativeSelect;

export {
  NativeSelect_default
};
//# sourceMappingURL=chunk-MHTDUBCY.js.map
